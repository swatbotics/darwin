/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 55 generated on 2012-07-19 16:07:45.551793
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=((x1)*(x2));
x7=((x0)*(x3)*(x4));
x8=((x6)+(((-1.00000000000000)*(x7))));
x9=((x2)*(x4));
x10=((x0)*(x1)*(x3));
x11=((x9)+(x10));
x12=IKcos(j[3]);
x13=IKcos(j[5]);
x14=IKsin(j[4]);
x15=((-1.00000000000000)*(x11));
x16=((-1.00000000000000)*(x15)*(x5));
x17=((-1.00000000000000)*(x12)*(x8));
x18=((x17)+(x16));
x19=((x14)*(x18));
x20=IKcos(j[4]);
x21=((x5)*(x8));
x22=((x11)*(x12));
x23=((x21)+(x22));
x24=((x20)*(x23));
x25=((x19)+(x24));
x26=IKcos(j[1]);
x27=IKsin(j[5]);
x28=((0.0930000000000000)*(x9));
x29=((0.0930000000000000)*(x10));
x30=((x28)+(x29));
x31=((x1)*(x26)*(x5));
x32=((x12)*(x26)*(x4));
x33=((x32)+(x31));
x34=((-1.00000000000000)*(x33));
x35=((x14)*(x34));
x36=((x26)*(x4)*(x5));
x37=((x1)*(x12)*(x26));
x38=((((-1.00000000000000)*(x37)))+(x36));
x39=((x20)*(x38));
x40=((x39)+(x35));
x41=((-1.00000000000000)*(x40));
x42=((x0)*(x4));
x43=((x3)*(x6));
x44=((x0)*(x1));
x45=((x3)*(x9));
x46=((x44)+(x45));
x47=((-1.00000000000000)*(x46));
x48=((x47)*(x5));
x49=((((-1.00000000000000)*(x42)))+(x43));
x50=((x12)*(x49));
x51=((x48)+(x50));
x52=((x20)*(x51));
x53=((((-1.00000000000000)*(x43)))+(x42));
x54=((-1.00000000000000)*(x5)*(x53));
x55=((-1.00000000000000)*(x12)*(x47));
x56=((x55)+(x54));
x57=((x14)*(x56));
x58=((x57)+(x52));
x59=((0.0930000000000000)*(x42));
x60=((0.0930000000000000)*(x43));
eerot[0]=((((x25)*(x27)))+(((x0)*(x13)*(x26))));
eerot[1]=((((-1.00000000000000)*(x0)*(x26)*(x27)))+(((x13)*(x25))));
eerot[2]=((((x20)*(((((-1.00000000000000)*(x15)*(x5)))+(((-1.00000000000000)*(x12)*(x8)))))))+(((x14)*(((((-1.00000000000000)*(x22)))+(((-1.00000000000000)*(x21))))))));
eetrans[0]=((0.0370000000000000)+(((x5)*(((((0.0930000000000000)*(x7)))+(((-0.0930000000000000)*(x6)))))))+(((-1.00000000000000)*(x30)))+(((-1.00000000000000)*(x12)*(x30))));
eerot[3]=((((x27)*(x41)))+(((-1.00000000000000)*(x13)*(x3))));
eerot[4]=((((x27)*(x3)))+(((x13)*(x41))));
eerot[5]=((((x20)*(x33)))+(((x14)*(x38))));
eetrans[1]=((-0.122200000000000)+(((-0.0930000000000000)*(x37)))+(((-0.0930000000000000)*(x1)*(x26)))+(((0.0930000000000000)*(x36))));
eerot[6]=((((x27)*(x58)))+(((x13)*(x2)*(x26))));
eerot[7]=((((x13)*(x58)))+(((-1.00000000000000)*(x2)*(x26)*(x27))));
eerot[8]=((((-1.00000000000000)*(x14)*(x51)))+(((x20)*(x56))));
eetrans[2]=((-0.00500000000000000)+(((x5)*(((((0.0930000000000000)*(x44)))+(((1.00000000000000)*(x28)*(x3)))))))+(((x12)*(((x59)+(((-1.00000000000000)*(x60)))))))+(x59)+(((-1.00000000000000)*(x60))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j2=numeric_limits<IKReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IKReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IKReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IKReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.0370000000000000)+(px));
new_r10=r20;
new_r11=r21;
new_r12=r22;
new_py=((0.00500000000000000)+(pz));
new_r20=((-1.00000000000000)*(r10));
new_r21=((-1.00000000000000)*(r11));
new_r22=((-1.00000000000000)*(r12));
new_pz=((-0.122200000000000)+(((-1.00000000000000)*(py))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=((-1.00000000000000)+(((57.8101514625968)*(pp))));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IKReal x61=((-1.00000000000000)*(npx));
if( IKabs(x61) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x62=IKatan2(x61, npy);
j7array[0]=((-1.00000000000000)*(x62));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.00000000000000)*(x62))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=IKsign(((((-93.0000000000000)*(npz)*(sj5)))+(((93.0000000000000)*(cj5)*(cj7)*(npy)))+(((93.0000000000000)*(npx)*(sj7)))+(((93.0000000000000)*(cj7)*(npy)))+(((93.0000000000000)*(cj5)*(npx)*(sj7)))));
dummyeval[0]=((((-1.00000000000000)*(npz)*(sj5)))+(((npx)*(sj7)))+(((cj5)*(npx)*(sj7)))+(((cj7)*(npy)))+(((cj5)*(cj7)*(npy))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj5)*(npz)))+(((-1.00000000000000)*(npx)*(sj5)*(sj7)))+(((-1.00000000000000)*(npz)))+(((-1.00000000000000)*(cj7)*(npy)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=pp;
evalcond[2]=((((npy)*(sj7)))+(((-1.00000000000000)*(cj7)*(npx))));
evalcond[3]=((-1.00000000000000)*(npz));
evalcond[4]=((((-1.00000000000000)*(npx)*(sj7)))+(((-1.00000000000000)*(cj7)*(npy))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IKReal x63=((npx)*(sj7));
IKReal x64=((cj7)*(npy));
IKReal x65=((x63)+(x64));
if( IKabs(npz) < IKFAST_ATAN2_MAGTHRESH && IKabs(x65) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x66=IKatan2(npz, x65);
j6array[0]=((-1.00000000000000)*(x66));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.00000000000000)*(x66))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[1];
IKReal x67=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(cj7)*(npy)*(x67)))+(((npz)*(IKsin(j6))))+(((-1.00000000000000)*(npx)*(sj7)*(x67))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IKabs(((((-93000.0000000000)*(npz)))+(((-93000.0000000000)*(npx)*(sj5)*(sj7)))+(((-93000.0000000000)*(cj7)*(npy)*(sj5)))+(((-93000.0000000000)*(cj5)*(npz))))) != 0)?((IKReal)1/(((((-93000.0000000000)*(npz)))+(((-93000.0000000000)*(npx)*(sj5)*(sj7)))+(((-93000.0000000000)*(cj7)*(npy)*(sj5)))+(((-93000.0000000000)*(cj5)*(npz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((npz)*(npz))))+(((8649.00000000000)*((sj5)*(sj5)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((-93.0000000000000)*(cj5)*(npz)))+(((-93.0000000000000)*(npz)))+(((-93.0000000000000)*(cj7)*(npy)*(sj5)))+(((-93.0000000000000)*(npx)*(sj5)*(sj7))))) != 0)?((IKReal)1/(((((-93.0000000000000)*(cj5)*(npz)))+(((-93.0000000000000)*(npz)))+(((-93.0000000000000)*(cj7)*(npy)*(sj5)))+(((-93.0000000000000)*(npx)*(sj5)*(sj7)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(npx)*(npz)*(sj7)))+(((8.64900000000000)*(sj5)))+(((1000.00000000000)*(cj7)*(npy)*(npz)))+(((8.64900000000000)*(cj5)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((-93000.0000000000)*(npz)))+(((-93000.0000000000)*(npx)*(sj5)*(sj7)))+(((-93000.0000000000)*(cj7)*(npy)*(sj5)))+(((-93000.0000000000)*(cj5)*(npz))))) != 0)?((IKReal)1/(((((-93000.0000000000)*(npz)))+(((-93000.0000000000)*(npx)*(sj5)*(sj7)))+(((-93000.0000000000)*(cj7)*(npy)*(sj5)))+(((-93000.0000000000)*(cj5)*(npz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((npz)*(npz))))+(((8649.00000000000)*((sj5)*(sj5))))))))+IKsqr(((((IKabs(((((-93.0000000000000)*(cj5)*(npz)))+(((-93.0000000000000)*(npz)))+(((-93.0000000000000)*(cj7)*(npy)*(sj5)))+(((-93.0000000000000)*(npx)*(sj5)*(sj7))))) != 0)?((IKReal)1/(((((-93.0000000000000)*(cj5)*(npz)))+(((-93.0000000000000)*(npz)))+(((-93.0000000000000)*(cj7)*(npy)*(sj5)))+(((-93.0000000000000)*(npx)*(sj5)*(sj7)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(npx)*(npz)*(sj7)))+(((8.64900000000000)*(sj5)))+(((1000.00000000000)*(cj7)*(npy)*(npz)))+(((8.64900000000000)*(cj5)*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IKabs(((((-93000.0000000000)*(npz)))+(((-93000.0000000000)*(npx)*(sj5)*(sj7)))+(((-93000.0000000000)*(cj7)*(npy)*(sj5)))+(((-93000.0000000000)*(cj5)*(npz))))) != 0)?((IKReal)1/(((((-93000.0000000000)*(npz)))+(((-93000.0000000000)*(npx)*(sj5)*(sj7)))+(((-93000.0000000000)*(cj7)*(npy)*(sj5)))+(((-93000.0000000000)*(cj5)*(npz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((npz)*(npz))))+(((8649.00000000000)*((sj5)*(sj5))))))), ((((IKabs(((((-93.0000000000000)*(cj5)*(npz)))+(((-93.0000000000000)*(npz)))+(((-93.0000000000000)*(cj7)*(npy)*(sj5)))+(((-93.0000000000000)*(npx)*(sj5)*(sj7))))) != 0)?((IKReal)1/(((((-93.0000000000000)*(cj5)*(npz)))+(((-93.0000000000000)*(npz)))+(((-93.0000000000000)*(cj7)*(npy)*(sj5)))+(((-93.0000000000000)*(npx)*(sj5)*(sj7)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(npx)*(npz)*(sj7)))+(((8.64900000000000)*(sj5)))+(((1000.00000000000)*(cj7)*(npy)*(npz)))+(((8.64900000000000)*(cj5)*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[4];
IKReal x123=IKsin(j6);
IKReal x124=IKcos(j6);
evalcond[0]=((((0.0930000000000000)*(x123)))+(((0.0930000000000000)*(cj5)*(x123)))+(((-1.00000000000000)*(npz)))+(((-0.0930000000000000)*(sj5)*(x124))));
evalcond[1]=((((0.0930000000000000)*(sj5)))+(((npz)*(x124)))+(((npx)*(sj7)*(x123)))+(((cj7)*(npy)*(x123))));
evalcond[2]=((-0.0930000000000000)+(((-1.00000000000000)*(cj7)*(npy)*(x124)))+(((-1.00000000000000)*(npx)*(sj7)*(x124)))+(((npz)*(x123)))+(((-0.0930000000000000)*(cj5))));
evalcond[3]=((((-0.0930000000000000)*(cj5)*(x124)))+(((-1.00000000000000)*(npx)*(sj7)))+(((-0.0930000000000000)*(x124)))+(((-1.00000000000000)*(cj7)*(npy)))+(((-0.0930000000000000)*(sj5)*(x123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst0)*(((((-8.64900000000000)*(sj5)))+(((1000.00000000000)*(npx)*(npz)*(sj7)))+(((-8.64900000000000)*(cj5)*(sj5)))+(((1000.00000000000)*(cj7)*(npy)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst0)*(((8.64900000000000)+(((-1000.00000000000)*((npz)*(npz))))+(((8.64900000000000)*((cj5)*(cj5))))+(((17.2980000000000)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((-8.64900000000000)*(sj5)))+(((1000.00000000000)*(npx)*(npz)*(sj7)))+(((-8.64900000000000)*(cj5)*(sj5)))+(((1000.00000000000)*(cj7)*(npy)*(npz)))))), ((-1.00000000000000)*(gconst0)*(((8.64900000000000)+(((-1000.00000000000)*((npz)*(npz))))+(((8.64900000000000)*((cj5)*(cj5))))+(((17.2980000000000)*(cj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[4];
IKReal x125=IKsin(j6);
IKReal x126=IKcos(j6);
evalcond[0]=((((0.0930000000000000)*(x125)))+(((0.0930000000000000)*(cj5)*(x125)))+(((-1.00000000000000)*(npz)))+(((-0.0930000000000000)*(sj5)*(x126))));
evalcond[1]=((((0.0930000000000000)*(sj5)))+(((npz)*(x126)))+(((npx)*(sj7)*(x125)))+(((cj7)*(npy)*(x125))));
evalcond[2]=((-0.0930000000000000)+(((-1.00000000000000)*(cj7)*(npy)*(x126)))+(((-1.00000000000000)*(npx)*(sj7)*(x126)))+(((npz)*(x125)))+(((-0.0930000000000000)*(cj5))));
evalcond[3]=((((-0.0930000000000000)*(cj5)*(x126)))+(((-1.00000000000000)*(npx)*(sj7)))+(((-0.0930000000000000)*(x126)))+(((-1.00000000000000)*(cj7)*(npy)))+(((-0.0930000000000000)*(sj5)*(x125))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x68=((r00)*(sj7));
IKReal x69=((cj7)*(r01));
IKReal x70=((x68)+(x69));
IKReal x71=((sj6)*(x70));
IKReal x72=((cj6)*(r02));
IKReal x73=((x72)+(x71));
IKReal x74=((cj6)*(x70));
IKReal x75=((r02)*(sj6));
IKReal x76=((((-1.00000000000000)*(x75)))+(x74));
IKReal x77=((r10)*(sj7));
IKReal x78=((cj7)*(r11));
IKReal x79=((x77)+(x78));
IKReal x80=((cj6)*(x79));
IKReal x81=((r12)*(sj6));
IKReal x82=((x80)+(((-1.00000000000000)*(x81))));
IKReal x83=((sj6)*(x79));
IKReal x84=((cj6)*(r12));
IKReal x85=((x83)+(x84));
IKReal x86=((cj7)*(r21));
IKReal x87=((r20)*(sj7));
IKReal x88=((x86)+(x87));
IKReal x89=((sj6)*(x88));
IKReal x90=((cj6)*(r22));
IKReal x91=((x89)+(x90));
IKReal x92=((cj6)*(x88));
IKReal x93=((r22)*(sj6));
IKReal x94=((x92)+(((-1.00000000000000)*(x93))));
new_r00=((((cj5)*(x73)))+(((-1.00000000000000)*(sj5)*(x76))));
new_r01=((((cj5)*(x76)))+(((sj5)*(x73))));
new_r02=((((r01)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00))));
new_r10=((((cj5)*(x85)))+(((-1.00000000000000)*(sj5)*(x82))));
new_r11=((((cj5)*(x82)))+(((sj5)*(x85))));
new_r12=((((r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r10))));
new_r20=((((cj5)*(x91)))+(((-1.00000000000000)*(sj5)*(x94))));
new_r21=((((cj5)*(x94)))+(((sj5)*(x91))));
new_r22=((((r21)*(sj7)))+(((-1.00000000000000)*(cj7)*(r20))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
sj3array[0]=((-1.00000000000000)*(new_r22));
if( sj3array[0] >= -1-IKFAST_SINCOS_THRESH && sj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12))))));
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
IKReal x95=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=x95;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x95;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x96=IKatan2(new_r02, new_r12);
j2array[0]=((-1.00000000000000)*(x96));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x96))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j2))))+(((-1.00000000000000)*(new_r02)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))))+IKsqr(((((-1.00000000000000)*(new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))), ((((-1.00000000000000)*(new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x97=IKsin(j4);
IKReal x98=IKcos(j4);
evalcond[0]=((x97)+(((cj2)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj2))));
evalcond[1]=((((-1.00000000000000)*(cj2)*(new_r10)))+(((new_r00)*(sj2)))+(x98));
evalcond[2]=((((new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(x97))));
evalcond[3]=((((new_r11)*(sj2)))+(((cj2)*(new_r01)))+(((-1.00000000000000)*(x98))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j2;
solution.basesol[0].indices[0] = _ij2[0];
solution.basesol[0].indices[1] = _ij2[1];
solution.basesol[0].maxsolutions = _nj2;
solution.basesol[1].foffset = j3;
solution.basesol[1].indices[0] = _ij3[0];
solution.basesol[1].indices[1] = _ij3[1];
solution.basesol[1].maxsolutions = _nj3;
solution.basesol[2].foffset = j4;
solution.basesol[2].indices[0] = _ij4[0];
solution.basesol[2].indices[1] = _ij4[1];
solution.basesol[2].maxsolutions = _nj4;
solution.basesol[3].foffset = j5;
solution.basesol[3].indices[0] = _ij5[0];
solution.basesol[3].indices[1] = _ij5[1];
solution.basesol[3].maxsolutions = _nj5;
solution.basesol[4].foffset = j6;
solution.basesol[4].indices[0] = _ij6[0];
solution.basesol[4].indices[1] = _ij6[1];
solution.basesol[4].maxsolutions = _nj6;
solution.basesol[5].foffset = j7;
solution.basesol[5].indices[0] = _ij7[0];
solution.basesol[5].indices[1] = _ij7[1];
solution.basesol[5].maxsolutions = _nj7;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j3)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x99=IKatan2(new_r02, new_r12);
j2array[0]=((-1.00000000000000)*(x99));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x99))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j2))))+(((-1.00000000000000)*(new_r02)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.00000000000000)*(cj2)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj2)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj2)))))+IKsqr(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.00000000000000)*(cj2)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj2)))), ((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x100=IKsin(j4);
IKReal x101=IKcos(j4);
evalcond[0]=((x100)+(((cj2)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj2))));
evalcond[1]=((((-1.00000000000000)*(cj2)*(new_r10)))+(((new_r00)*(sj2)))+(x101));
evalcond[2]=((((new_r10)*(sj2)))+(x100)+(((cj2)*(new_r00))));
evalcond[3]=((((new_r11)*(sj2)))+(x101)+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j2;
solution.basesol[0].indices[0] = _ij2[0];
solution.basesol[0].indices[1] = _ij2[1];
solution.basesol[0].maxsolutions = _nj2;
solution.basesol[1].foffset = j3;
solution.basesol[1].indices[0] = _ij3[0];
solution.basesol[1].indices[1] = _ij3[1];
solution.basesol[1].maxsolutions = _nj3;
solution.basesol[2].foffset = j4;
solution.basesol[2].indices[0] = _ij4[0];
solution.basesol[2].indices[1] = _ij4[1];
solution.basesol[2].maxsolutions = _nj4;
solution.basesol[3].foffset = j5;
solution.basesol[3].indices[0] = _ij5[0];
solution.basesol[3].indices[1] = _ij5[1];
solution.basesol[3].maxsolutions = _nj5;
solution.basesol[4].foffset = j6;
solution.basesol[4].indices[0] = _ij6[0];
solution.basesol[4].indices[1] = _ij6[1];
solution.basesol[4].maxsolutions = _nj6;
solution.basesol[5].foffset = j7;
solution.basesol[5].indices[0] = _ij7[0];
solution.basesol[5].indices[1] = _ij7[1];
solution.basesol[5].maxsolutions = _nj7;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((cj3)*(gconst1)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((cj3)*(gconst1)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((cj3)*(gconst1)*(new_r12)), ((cj3)*(gconst1)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[6];
IKReal x102=IKcos(j2);
IKReal x103=IKsin(j2);
evalcond[0]=((((-1.00000000000000)*(new_r02)*(x103)))+(((new_r12)*(x102))));
evalcond[1]=((cj3)+(((new_r02)*(x102)))+(((new_r12)*(x103))));
evalcond[2]=((((new_r20)*(sj3)))+(((cj3)*(new_r10)*(x103)))+(((cj3)*(new_r00)*(x102))));
evalcond[3]=((((cj3)*(new_r11)*(x103)))+(((cj3)*(new_r01)*(x102)))+(((new_r21)*(sj3))));
evalcond[4]=((1.00000000000000)+(((cj3)*(new_r12)*(x103)))+(((new_r22)*(sj3)))+(((cj3)*(new_r02)*(x102))));
evalcond[5]=((((-1.00000000000000)*(new_r02)*(sj3)*(x102)))+(((-1.00000000000000)*(new_r12)*(sj3)*(x103)))+(((cj3)*(new_r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x104=((new_r02)*(sj2));
IKReal x105=((cj2)*(new_r12));
IKReal x106=((1.00000000000000)+(new_r22));
IKReal x107=((new_r12)*(sj2));
IKReal x108=((cj2)*(new_r02));
IKReal x109=((x108)+(x107));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j3)), 6.28318530717959)));
evalcond[1]=x106;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((((-1.00000000000000)*(x104)))+(x105));
evalcond[5]=((((-1.00000000000000)*(x105)))+(x104));
evalcond[6]=x109;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x106;
evalcond[10]=((-1.00000000000000)*(x109));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))))+IKsqr(((((-1.00000000000000)*(new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((new_r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(new_r11)))), ((((-1.00000000000000)*(new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x110=IKsin(j4);
IKReal x111=IKcos(j4);
evalcond[0]=((x110)+(((cj2)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj2))));
evalcond[1]=((((-1.00000000000000)*(cj2)*(new_r10)))+(((new_r00)*(sj2)))+(x111));
evalcond[2]=((((new_r10)*(sj2)))+(((-1.00000000000000)*(x110)))+(((cj2)*(new_r00))));
evalcond[3]=((((new_r11)*(sj2)))+(((-1.00000000000000)*(x111)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j2;
solution.basesol[0].indices[0] = _ij2[0];
solution.basesol[0].indices[1] = _ij2[1];
solution.basesol[0].maxsolutions = _nj2;
solution.basesol[1].foffset = j3;
solution.basesol[1].indices[0] = _ij3[0];
solution.basesol[1].indices[1] = _ij3[1];
solution.basesol[1].maxsolutions = _nj3;
solution.basesol[2].foffset = j4;
solution.basesol[2].indices[0] = _ij4[0];
solution.basesol[2].indices[1] = _ij4[1];
solution.basesol[2].maxsolutions = _nj4;
solution.basesol[3].foffset = j5;
solution.basesol[3].indices[0] = _ij5[0];
solution.basesol[3].indices[1] = _ij5[1];
solution.basesol[3].maxsolutions = _nj5;
solution.basesol[4].foffset = j6;
solution.basesol[4].indices[0] = _ij6[0];
solution.basesol[4].indices[1] = _ij6[1];
solution.basesol[4].maxsolutions = _nj6;
solution.basesol[5].foffset = j7;
solution.basesol[5].indices[0] = _ij7[0];
solution.basesol[5].indices[1] = _ij7[1];
solution.basesol[5].maxsolutions = _nj7;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x112=((new_r02)*(sj2));
IKReal x113=((cj2)*(new_r12));
IKReal x114=((new_r12)*(sj2));
IKReal x115=((cj2)*(new_r02));
IKReal x116=((x115)+(x114));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j3)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((((-1.00000000000000)*(x112)))+(x113));
evalcond[5]=((((-1.00000000000000)*(x113)))+(x112));
evalcond[6]=x116;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=x116;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.00000000000000)*(cj2)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj2)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj2)))))+IKsqr(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.00000000000000)*(cj2)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj2)))), ((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x117=IKsin(j4);
IKReal x118=IKcos(j4);
evalcond[0]=((x117)+(((cj2)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj2))));
evalcond[1]=((((-1.00000000000000)*(cj2)*(new_r10)))+(((new_r00)*(sj2)))+(x118));
evalcond[2]=((((new_r10)*(sj2)))+(x117)+(((cj2)*(new_r00))));
evalcond[3]=((((new_r11)*(sj2)))+(x118)+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j2;
solution.basesol[0].indices[0] = _ij2[0];
solution.basesol[0].indices[1] = _ij2[1];
solution.basesol[0].maxsolutions = _nj2;
solution.basesol[1].foffset = j3;
solution.basesol[1].indices[0] = _ij3[0];
solution.basesol[1].indices[1] = _ij3[1];
solution.basesol[1].maxsolutions = _nj3;
solution.basesol[2].foffset = j4;
solution.basesol[2].indices[0] = _ij4[0];
solution.basesol[2].indices[1] = _ij4[1];
solution.basesol[2].maxsolutions = _nj4;
solution.basesol[3].foffset = j5;
solution.basesol[3].indices[0] = _ij5[0];
solution.basesol[3].indices[1] = _ij5[1];
solution.basesol[3].maxsolutions = _nj5;
solution.basesol[4].foffset = j6;
solution.basesol[4].indices[0] = _ij6[0];
solution.basesol[4].indices[1] = _ij6[1];
solution.basesol[4].maxsolutions = _nj6;
solution.basesol[5].foffset = j7;
solution.basesol[5].indices[0] = _ij7[0];
solution.basesol[5].indices[1] = _ij7[1];
solution.basesol[5].maxsolutions = _nj7;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.00000000000000)*(gconst3)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst3)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((-1.00000000000000)*(gconst3)*(new_r20)), ((-1.00000000000000)*(gconst3)*(new_r21)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[8];
IKReal x119=IKsin(j4);
IKReal x120=IKcos(j4);
evalcond[0]=((((cj3)*(x119)))+(new_r20));
evalcond[1]=((((cj3)*(x120)))+(new_r21));
evalcond[2]=((x119)+(((cj2)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj2))));
evalcond[3]=((((-1.00000000000000)*(cj2)*(new_r10)))+(((new_r00)*(sj2)))+(x120));
evalcond[4]=((((new_r10)*(sj2)))+(((cj2)*(new_r00)))+(((-1.00000000000000)*(sj3)*(x119))));
evalcond[5]=((((-1.00000000000000)*(sj3)*(x120)))+(((new_r11)*(sj2)))+(((cj2)*(new_r01))));
evalcond[6]=((x119)+(((-1.00000000000000)*(new_r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(new_r00)*(sj3)))+(((cj3)*(new_r20))));
evalcond[7]=((x120)+(((-1.00000000000000)*(cj2)*(new_r01)*(sj3)))+(((-1.00000000000000)*(new_r11)*(sj2)*(sj3)))+(((cj3)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j2;
solution.basesol[0].indices[0] = _ij2[0];
solution.basesol[0].indices[1] = _ij2[1];
solution.basesol[0].maxsolutions = _nj2;
solution.basesol[1].foffset = j3;
solution.basesol[1].indices[0] = _ij3[0];
solution.basesol[1].indices[1] = _ij3[1];
solution.basesol[1].maxsolutions = _nj3;
solution.basesol[2].foffset = j4;
solution.basesol[2].indices[0] = _ij4[0];
solution.basesol[2].indices[1] = _ij4[1];
solution.basesol[2].maxsolutions = _nj4;
solution.basesol[3].foffset = j5;
solution.basesol[3].indices[0] = _ij5[0];
solution.basesol[3].indices[1] = _ij5[1];
solution.basesol[3].maxsolutions = _nj5;
solution.basesol[4].foffset = j6;
solution.basesol[4].indices[0] = _ij6[0];
solution.basesol[4].indices[1] = _ij6[1];
solution.basesol[4].maxsolutions = _nj6;
solution.basesol[5].foffset = j7;
solution.basesol[5].indices[0] = _ij7[0];
solution.basesol[5].indices[1] = _ij7[1];
solution.basesol[5].maxsolutions = _nj7;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.00000000000000)*(gconst2)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst2)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((-1.00000000000000)*(gconst2)*(new_r20)), ((-1.00000000000000)*(gconst2)*(new_r21)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[2];
evalcond[0]=((new_r20)+(((cj3)*(IKsin(j4)))));
evalcond[1]=((((cj3)*(IKcos(j4))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12))))));
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((cj3)*(gconst4)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((cj3)*(gconst4)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((cj3)*(gconst4)*(new_r12)), ((cj3)*(gconst4)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[12];
IKReal x121=IKcos(j2);
IKReal x122=IKsin(j2);
evalcond[0]=((((-1.00000000000000)*(new_r02)*(x122)))+(((new_r12)*(x121))));
evalcond[1]=((cj3)+(((new_r02)*(x121)))+(((new_r12)*(x122))));
evalcond[2]=((sj4)+(((-1.00000000000000)*(new_r01)*(x122)))+(((new_r11)*(x121))));
evalcond[3]=((((-1.00000000000000)*(new_r10)*(x121)))+(cj4)+(((new_r00)*(x122))));
evalcond[4]=((((new_r00)*(x121)))+(((-1.00000000000000)*(sj3)*(sj4)))+(((new_r10)*(x122))));
evalcond[5]=((((new_r01)*(x121)))+(((-1.00000000000000)*(cj4)*(sj3)))+(((new_r11)*(x122))));
evalcond[6]=((((cj3)*(new_r10)*(x122)))+(((new_r20)*(sj3)))+(((cj3)*(new_r00)*(x121))));
evalcond[7]=((((cj3)*(new_r11)*(x122)))+(((new_r21)*(sj3)))+(((cj3)*(new_r01)*(x121))));
evalcond[8]=((1.00000000000000)+(((cj3)*(new_r12)*(x122)))+(((new_r22)*(sj3)))+(((cj3)*(new_r02)*(x121))));
evalcond[9]=((((-1.00000000000000)*(new_r02)*(sj3)*(x121)))+(((cj3)*(new_r22)))+(((-1.00000000000000)*(new_r12)*(sj3)*(x122))));
evalcond[10]=((((-1.00000000000000)*(new_r10)*(sj3)*(x122)))+(sj4)+(((-1.00000000000000)*(new_r00)*(sj3)*(x121)))+(((cj3)*(new_r20))));
evalcond[11]=((((-1.00000000000000)*(new_r01)*(sj3)*(x121)))+(cj4)+(((-1.00000000000000)*(new_r11)*(sj3)*(x122)))+(((cj3)*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j2;
solution.basesol[0].indices[0] = _ij2[0];
solution.basesol[0].indices[1] = _ij2[1];
solution.basesol[0].maxsolutions = _nj2;
solution.basesol[1].foffset = j3;
solution.basesol[1].indices[0] = _ij3[0];
solution.basesol[1].indices[1] = _ij3[1];
solution.basesol[1].maxsolutions = _nj3;
solution.basesol[2].foffset = j4;
solution.basesol[2].indices[0] = _ij4[0];
solution.basesol[2].indices[1] = _ij4[1];
solution.basesol[2].maxsolutions = _nj4;
solution.basesol[3].foffset = j5;
solution.basesol[3].indices[0] = _ij5[0];
solution.basesol[3].indices[1] = _ij5[1];
solution.basesol[3].maxsolutions = _nj5;
solution.basesol[4].foffset = j6;
solution.basesol[4].indices[0] = _ij6[0];
solution.basesol[4].indices[1] = _ij6[1];
solution.basesol[4].maxsolutions = _nj6;
solution.basesol[5].foffset = j7;
solution.basesol[5].indices[0] = _ij7[0];
solution.basesol[5].indices[1] = _ij7[1];
solution.basesol[5].maxsolutions = _nj7;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "9b12b671fb2bbd0a859a181528daed66"; }

IKFAST_API const char* getIKFastVersion() { return "55"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
