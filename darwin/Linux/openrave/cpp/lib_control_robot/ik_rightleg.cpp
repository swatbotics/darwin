/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 55 generated on 2012-07-19 16:06:44.465976
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[2]);
x1=IKsin(j[0]);
x2=IKcos(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=((x0)*(x1));
x7=((x2)*(x3)*(x4));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKsin(j[3]);
x11=((x1)*(x4));
x12=((x0)*(x2)*(x3));
x13=IKcos(j[5]);
x14=IKcos(j[4]);
x15=((((-1.00000000000000)*(x11)))+(x12));
x16=((x15)*(x5));
x17=((x10)*(x9));
x18=((x17)+(x16));
x19=((x14)*(x18));
x20=IKsin(j[4]);
x21=((x5)*(x9));
x22=((((-1.00000000000000)*(x12)))+(x11));
x23=((x10)*(x22));
x24=((x21)+(x23));
x25=((-1.00000000000000)*(x24));
x26=((x20)*(x25));
x27=((x19)+(x26));
x28=IKcos(j[1]);
x29=IKsin(j[5]);
x30=((0.0930000000000000)*(x11));
x31=((0.0930000000000000)*(x12));
x32=((x0)*(x10)*(x28));
x33=((x28)*(x4)*(x5));
x34=((x33)+(x32));
x35=((-1.00000000000000)*(x34));
x36=((x20)*(x35));
x37=((x10)*(x28)*(x4));
x38=((x0)*(x28)*(x5));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x14)*(x39));
x41=((x36)+(x40));
x42=((-1.00000000000000)*(x41));
x43=((x0)*(x2));
x44=((x11)*(x3));
x45=((((-1.00000000000000)*(x44)))+(x43));
x46=((x2)*(x4));
x47=((x3)*(x6));
x48=((x46)+(x47));
x49=((x48)*(x5));
x50=((x10)*(x45));
x51=((x49)+(x50));
x52=((x14)*(x51));
x53=((x45)*(x5));
x54=((-1.00000000000000)*(x48));
x55=((x10)*(x54));
x56=((x55)+(x53));
x57=((-1.00000000000000)*(x56));
x58=((x20)*(x57));
x59=((x58)+(x52));
x60=((0.0930000000000000)*(x47));
x61=((0.0930000000000000)*(x46));
x62=((x60)+(x61));
eerot[0]=((((x13)*(x2)*(x28)))+(((x27)*(x29))));
eerot[1]=((((-1.00000000000000)*(x2)*(x28)*(x29)))+(((x13)*(x27))));
eerot[2]=((((x18)*(x20)))+(((x14)*(x24))));
eetrans[0]=((-0.0370000000000000)+(((x10)*(((((0.0930000000000000)*(x7)))+(((0.0930000000000000)*(x6)))))))+(((-1.00000000000000)*(x31)))+(((x5)*(((((-1.00000000000000)*(x31)))+(x30)))))+(x30));
eerot[3]=((((x29)*(x42)))+(((-1.00000000000000)*(x13)*(x3))));
eerot[4]=((((x29)*(x3)))+(((x13)*(x42))));
eerot[5]=((((x14)*(x35)))+(((x20)*(((((-1.00000000000000)*(x37)))+(x38))))));
eetrans[1]=((-0.122200000000000)+(((-0.0930000000000000)*(x38)))+(((-0.0930000000000000)*(x0)*(x28)))+(((0.0930000000000000)*(x37))));
eerot[6]=((((x1)*(x13)*(x28)))+(((x29)*(x59))));
eerot[7]=((((x13)*(x59)))+(((-1.00000000000000)*(x1)*(x28)*(x29))));
eerot[8]=((((x14)*(x56)))+(((x20)*(x51))));
eetrans[2]=((-0.00500000000000000)+(((-1.00000000000000)*(x5)*(x62)))+(((x10)*(((((-0.0930000000000000)*(x43)))+(((1.00000000000000)*(x3)*(x30)))))))+(((-1.00000000000000)*(x62))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j8,cj8,sj8,htj8,j9,cj9,sj9,htj9,j10,cj10,sj10,htj10,j11,cj11,sj11,htj11,j12,cj12,sj12,htj12,j13,cj13,sj13,htj13,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j8=numeric_limits<IKReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IKReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IKReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IKReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IKReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IKReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((0.0370000000000000)+(px));
new_r10=r20;
new_r11=r21;
new_r12=r22;
new_py=((0.00500000000000000)+(pz));
new_r20=((-1.00000000000000)*(r10));
new_r21=((-1.00000000000000)*(r11));
new_r22=((-1.00000000000000)*(r12));
new_pz=((-0.122200000000000)+(((-1.00000000000000)*(py))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
cj11array[0]=((-1.00000000000000)+(((57.8101514625968)*(pp))));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
IKReal x63=((-1.00000000000000)*(npx));
if( IKabs(x63) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x64=IKatan2(x63, npy);
j13array[0]=((-1.00000000000000)*(x64));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.00000000000000)*(x64))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=IKsign(((((93.0000000000000)*(cj13)*(npy)))+(((93.0000000000000)*(npz)*(sj11)))+(((93.0000000000000)*(cj11)*(npx)*(sj13)))+(((93.0000000000000)*(npx)*(sj13)))+(((93.0000000000000)*(cj11)*(cj13)*(npy)))));
dummyeval[0]=((((cj11)*(npx)*(sj13)))+(((cj11)*(cj13)*(npy)))+(((cj13)*(npy)))+(((npx)*(sj13)))+(((npz)*(sj11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((npx)*(sj11)*(sj13)))+(((cj13)*(npy)*(sj11)))+(((-1.00000000000000)*(cj11)*(npz)))+(((-1.00000000000000)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)));
evalcond[1]=pp;
evalcond[2]=((((-1.00000000000000)*(cj13)*(npx)))+(((npy)*(sj13))));
evalcond[3]=((-1.00000000000000)*(npz));
evalcond[4]=((((-1.00000000000000)*(cj13)*(npy)))+(((-1.00000000000000)*(npx)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IKReal x65=((-1.00000000000000)*(npz));
IKReal x66=((cj13)*(npy));
IKReal x67=((npx)*(sj13));
IKReal x68=((x66)+(x67));
if( IKabs(x65) < IKFAST_ATAN2_MAGTHRESH && IKabs(x68) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x69=IKatan2(x65, x68);
j12array[0]=((-1.00000000000000)*(x69));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.00000000000000)*(x69))));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IKReal evalcond[1];
IKReal x70=IKcos(j12);
evalcond[0]=((((-1.00000000000000)*(npx)*(sj13)*(x70)))+(((-1.00000000000000)*(npz)*(IKsin(j12))))+(((-1.00000000000000)*(cj13)*(npy)*(x70))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((IKabs(((((-93000.0000000000)*(npz)))+(((93000.0000000000)*(cj13)*(npy)*(sj11)))+(((-93000.0000000000)*(cj11)*(npz)))+(((93000.0000000000)*(npx)*(sj11)*(sj13))))) != 0)?((IKReal)1/(((((-93000.0000000000)*(npz)))+(((93000.0000000000)*(cj13)*(npy)*(sj11)))+(((-93000.0000000000)*(cj11)*(npz)))+(((93000.0000000000)*(npx)*(sj11)*(sj13)))))):(IKReal)1.0e30))*(((((1000000.00000000)*((npz)*(npz))))+(((-8649.00000000000)*((sj11)*(sj11)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((93.0000000000000)*(npx)*(sj11)*(sj13)))+(((-93.0000000000000)*(npz)))+(((93.0000000000000)*(cj13)*(npy)*(sj11)))+(((-93.0000000000000)*(cj11)*(npz))))) != 0)?((IKReal)1/(((((93.0000000000000)*(npx)*(sj11)*(sj13)))+(((-93.0000000000000)*(npz)))+(((93.0000000000000)*(cj13)*(npy)*(sj11)))+(((-93.0000000000000)*(cj11)*(npz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(npx)*(npz)*(sj13)))+(((-8.64900000000000)*(cj11)*(sj11)))+(((-8.64900000000000)*(sj11)))+(((1000.00000000000)*(cj13)*(npy)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((-93000.0000000000)*(npz)))+(((93000.0000000000)*(cj13)*(npy)*(sj11)))+(((-93000.0000000000)*(cj11)*(npz)))+(((93000.0000000000)*(npx)*(sj11)*(sj13))))) != 0)?((IKReal)1/(((((-93000.0000000000)*(npz)))+(((93000.0000000000)*(cj13)*(npy)*(sj11)))+(((-93000.0000000000)*(cj11)*(npz)))+(((93000.0000000000)*(npx)*(sj11)*(sj13)))))):(IKReal)1.0e30))*(((((1000000.00000000)*((npz)*(npz))))+(((-8649.00000000000)*((sj11)*(sj11))))))))+IKsqr(((((IKabs(((((93.0000000000000)*(npx)*(sj11)*(sj13)))+(((-93.0000000000000)*(npz)))+(((93.0000000000000)*(cj13)*(npy)*(sj11)))+(((-93.0000000000000)*(cj11)*(npz))))) != 0)?((IKReal)1/(((((93.0000000000000)*(npx)*(sj11)*(sj13)))+(((-93.0000000000000)*(npz)))+(((93.0000000000000)*(cj13)*(npy)*(sj11)))+(((-93.0000000000000)*(cj11)*(npz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(npx)*(npz)*(sj13)))+(((-8.64900000000000)*(cj11)*(sj11)))+(((-8.64900000000000)*(sj11)))+(((1000.00000000000)*(cj13)*(npy)*(npz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((IKabs(((((-93000.0000000000)*(npz)))+(((93000.0000000000)*(cj13)*(npy)*(sj11)))+(((-93000.0000000000)*(cj11)*(npz)))+(((93000.0000000000)*(npx)*(sj11)*(sj13))))) != 0)?((IKReal)1/(((((-93000.0000000000)*(npz)))+(((93000.0000000000)*(cj13)*(npy)*(sj11)))+(((-93000.0000000000)*(cj11)*(npz)))+(((93000.0000000000)*(npx)*(sj11)*(sj13)))))):(IKReal)1.0e30))*(((((1000000.00000000)*((npz)*(npz))))+(((-8649.00000000000)*((sj11)*(sj11))))))), ((((IKabs(((((93.0000000000000)*(npx)*(sj11)*(sj13)))+(((-93.0000000000000)*(npz)))+(((93.0000000000000)*(cj13)*(npy)*(sj11)))+(((-93.0000000000000)*(cj11)*(npz))))) != 0)?((IKReal)1/(((((93.0000000000000)*(npx)*(sj11)*(sj13)))+(((-93.0000000000000)*(npz)))+(((93.0000000000000)*(cj13)*(npy)*(sj11)))+(((-93.0000000000000)*(cj11)*(npz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(npx)*(npz)*(sj13)))+(((-8.64900000000000)*(cj11)*(sj11)))+(((-8.64900000000000)*(sj11)))+(((1000.00000000000)*(cj13)*(npy)*(npz)))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IKReal evalcond[4];
IKReal x126=IKsin(j12);
IKReal x127=IKcos(j12);
evalcond[0]=((((0.0930000000000000)*(sj11)*(x127)))+(((-0.0930000000000000)*(x126)))+(((-1.00000000000000)*(npz)))+(((-0.0930000000000000)*(cj11)*(x126))));
evalcond[1]=((((-1.00000000000000)*(npz)*(x127)))+(((npx)*(sj13)*(x126)))+(((cj13)*(npy)*(x126)))+(((0.0930000000000000)*(sj11))));
evalcond[2]=((-0.0930000000000000)+(((-1.00000000000000)*(npx)*(sj13)*(x127)))+(((-1.00000000000000)*(npz)*(x126)))+(((-1.00000000000000)*(cj13)*(npy)*(x127)))+(((-0.0930000000000000)*(cj11))));
evalcond[3]=((((-0.0930000000000000)*(sj11)*(x126)))+(((-1.00000000000000)*(cj13)*(npy)))+(((-0.0930000000000000)*(x127)))+(((-0.0930000000000000)*(cj11)*(x127)))+(((-1.00000000000000)*(npx)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((gconst0)*(((((-8.64900000000000)*(cj11)*(sj11)))+(((-8.64900000000000)*(sj11)))+(((-1000.00000000000)*(cj13)*(npy)*(npz)))+(((-1000.00000000000)*(npx)*(npz)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst0)*(((8.64900000000000)+(((-1000.00000000000)*((npz)*(npz))))+(((8.64900000000000)*((cj11)*(cj11))))+(((17.2980000000000)*(cj11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j12array[0]=IKatan2(((gconst0)*(((((-8.64900000000000)*(cj11)*(sj11)))+(((-8.64900000000000)*(sj11)))+(((-1000.00000000000)*(cj13)*(npy)*(npz)))+(((-1000.00000000000)*(npx)*(npz)*(sj13)))))), ((-1.00000000000000)*(gconst0)*(((8.64900000000000)+(((-1000.00000000000)*((npz)*(npz))))+(((8.64900000000000)*((cj11)*(cj11))))+(((17.2980000000000)*(cj11)))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IKReal evalcond[4];
IKReal x128=IKsin(j12);
IKReal x129=IKcos(j12);
evalcond[0]=((((0.0930000000000000)*(sj11)*(x129)))+(((-0.0930000000000000)*(x128)))+(((-1.00000000000000)*(npz)))+(((-0.0930000000000000)*(cj11)*(x128))));
evalcond[1]=((((-1.00000000000000)*(npz)*(x129)))+(((npx)*(sj13)*(x128)))+(((cj13)*(npy)*(x128)))+(((0.0930000000000000)*(sj11))));
evalcond[2]=((-0.0930000000000000)+(((-1.00000000000000)*(npx)*(sj13)*(x129)))+(((-1.00000000000000)*(npz)*(x128)))+(((-1.00000000000000)*(cj13)*(npy)*(x129)))+(((-0.0930000000000000)*(cj11))));
evalcond[3]=((((-0.0930000000000000)*(sj11)*(x128)))+(((-1.00000000000000)*(cj13)*(npy)))+(((-0.0930000000000000)*(x129)))+(((-0.0930000000000000)*(cj11)*(x129)))+(((-1.00000000000000)*(npx)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x71=((r00)*(sj13));
IKReal x72=((cj13)*(r01));
IKReal x73=((x72)+(x71));
IKReal x74=((sj12)*(x73));
IKReal x75=((cj12)*(r02));
IKReal x76=((((-1.00000000000000)*(x75)))+(x74));
IKReal x77=((r02)*(sj12));
IKReal x78=((cj12)*(x73));
IKReal x79=((x77)+(x78));
IKReal x80=((r10)*(sj13));
IKReal x81=((cj13)*(r11));
IKReal x82=((x80)+(x81));
IKReal x83=((r12)*(sj12));
IKReal x84=((cj12)*(x82));
IKReal x85=((x83)+(x84));
IKReal x86=((sj12)*(x82));
IKReal x87=((cj12)*(r12));
IKReal x88=((x86)+(((-1.00000000000000)*(x87))));
IKReal x89=((r20)*(sj13));
IKReal x90=((cj13)*(r21));
IKReal x91=((x89)+(x90));
IKReal x92=((r22)*(sj12));
IKReal x93=((cj12)*(x91));
IKReal x94=((x93)+(x92));
IKReal x95=((sj12)*(x91));
IKReal x96=((cj12)*(r22));
IKReal x97=((x95)+(((-1.00000000000000)*(x96))));
new_r00=((((-1.00000000000000)*(sj11)*(x79)))+(((cj11)*(x76))));
new_r01=((((sj11)*(x76)))+(((cj11)*(x79))));
new_r02=((((-1.00000000000000)*(r01)*(sj13)))+(((cj13)*(r00))));
new_r10=((((-1.00000000000000)*(sj11)*(x85)))+(((cj11)*(x88))));
new_r11=((((sj11)*(x88)))+(((cj11)*(x85))));
new_r12=((((-1.00000000000000)*(r11)*(sj13)))+(((cj13)*(r10))));
new_r20=((((-1.00000000000000)*(sj11)*(x94)))+(((cj11)*(x97))));
new_r21=((((sj11)*(x97)))+(((cj11)*(x94))));
new_r22=((((-1.00000000000000)*(r21)*(sj13)))+(((cj13)*(r20))));
{
IKReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
sj9array[0]=new_r22;
if( sj9array[0] >= -1-IKFAST_SINCOS_THRESH && sj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKasin(sj9array[0]);
    cj9array[0] = IKcos(j9array[0]);
    sj9array[1] = sj9array[0];
    j9array[1] = j9array[0] > 0 ? (IKPI-j9array[0]) : (-IKPI-j9array[0]);
    cj9array[1] = -cj9array[0];
}
else if( isnan(sj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(cj9);
dummyeval[0]=cj9;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
IKReal x98=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j9)), 6.28318530717959)));
evalcond[1]=x98;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x98;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x99=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x99));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x99))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IKReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j8))))+(((-1.00000000000000)*(new_r02)*(IKsin(j8)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj8)*(new_r10)))+(((new_r00)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))))+IKsqr(((((-1.00000000000000)*(cj8)*(new_r10)))+(((new_r00)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))), ((((-1.00000000000000)*(cj8)*(new_r10)))+(((new_r00)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x100=IKsin(j10);
IKReal x101=IKcos(j10);
evalcond[0]=((x101)+(((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(new_r11)))+(((new_r01)*(sj8)))+(x100));
evalcond[2]=((((new_r10)*(sj8)))+(((-1.00000000000000)*(x100)))+(((cj8)*(new_r00))));
evalcond[3]=((((new_r11)*(sj8)))+(((-1.00000000000000)*(x101)))+(((cj8)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j8;
solution.basesol[0].indices[0] = _ij8[0];
solution.basesol[0].indices[1] = _ij8[1];
solution.basesol[0].maxsolutions = _nj8;
solution.basesol[1].foffset = j9;
solution.basesol[1].indices[0] = _ij9[0];
solution.basesol[1].indices[1] = _ij9[1];
solution.basesol[1].maxsolutions = _nj9;
solution.basesol[2].foffset = j10;
solution.basesol[2].indices[0] = _ij10[0];
solution.basesol[2].indices[1] = _ij10[1];
solution.basesol[2].maxsolutions = _nj10;
solution.basesol[3].foffset = j11;
solution.basesol[3].indices[0] = _ij11[0];
solution.basesol[3].indices[1] = _ij11[1];
solution.basesol[3].maxsolutions = _nj11;
solution.basesol[4].foffset = j12;
solution.basesol[4].indices[0] = _ij12[0];
solution.basesol[4].indices[1] = _ij12[1];
solution.basesol[4].maxsolutions = _nj12;
solution.basesol[5].foffset = j13;
solution.basesol[5].indices[0] = _ij13[0];
solution.basesol[5].indices[1] = _ij13[1];
solution.basesol[5].maxsolutions = _nj13;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x102=IKatan2(new_r02, new_r12);
j8array[0]=((-1.00000000000000)*(x102));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.00000000000000)*(x102))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IKReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j8))))+(((-1.00000000000000)*(new_r02)*(IKsin(j8)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))))+IKsqr(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))), ((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x103=IKsin(j10);
IKReal x104=IKcos(j10);
evalcond[0]=((x104)+(((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(new_r11)))+(((new_r01)*(sj8)))+(x103));
evalcond[2]=((((new_r10)*(sj8)))+(x103)+(((cj8)*(new_r00))));
evalcond[3]=((((new_r11)*(sj8)))+(x104)+(((cj8)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j8;
solution.basesol[0].indices[0] = _ij8[0];
solution.basesol[0].indices[1] = _ij8[1];
solution.basesol[0].maxsolutions = _nj8;
solution.basesol[1].foffset = j9;
solution.basesol[1].indices[0] = _ij9[0];
solution.basesol[1].indices[1] = _ij9[1];
solution.basesol[1].maxsolutions = _nj9;
solution.basesol[2].foffset = j10;
solution.basesol[2].indices[0] = _ij10[0];
solution.basesol[2].indices[1] = _ij10[1];
solution.basesol[2].maxsolutions = _nj10;
solution.basesol[3].foffset = j11;
solution.basesol[3].indices[0] = _ij11[0];
solution.basesol[3].indices[1] = _ij11[1];
solution.basesol[3].maxsolutions = _nj11;
solution.basesol[4].foffset = j12;
solution.basesol[4].indices[0] = _ij12[0];
solution.basesol[4].indices[1] = _ij12[1];
solution.basesol[4].maxsolutions = _nj12;
solution.basesol[5].foffset = j13;
solution.basesol[5].indices[0] = _ij13[0];
solution.basesol[5].indices[1] = _ij13[1];
solution.basesol[5].maxsolutions = _nj13;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((cj9)*(gconst1)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((cj9)*(gconst1)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((cj9)*(gconst1)*(new_r12)), ((cj9)*(gconst1)*(new_r02)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IKReal evalcond[6];
IKReal x105=IKsin(j8);
IKReal x106=IKcos(j8);
evalcond[0]=((((-1.00000000000000)*(new_r02)*(x105)))+(((new_r12)*(x106))));
evalcond[1]=((((-1.00000000000000)*(cj9)))+(((new_r02)*(x106)))+(((new_r12)*(x105))));
evalcond[2]=((((new_r20)*(sj9)))+(((cj9)*(new_r00)*(x106)))+(((cj9)*(new_r10)*(x105))));
evalcond[3]=((((cj9)*(new_r11)*(x105)))+(((cj9)*(new_r01)*(x106)))+(((new_r21)*(sj9))));
evalcond[4]=((-1.00000000000000)+(((cj9)*(new_r12)*(x105)))+(((new_r22)*(sj9)))+(((cj9)*(new_r02)*(x106))));
evalcond[5]=((((cj9)*(new_r22)))+(((-1.00000000000000)*(new_r12)*(sj9)*(x105)))+(((-1.00000000000000)*(new_r02)*(sj9)*(x106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(cj9);
dummyeval[0]=cj9;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x107=((new_r02)*(sj8));
IKReal x108=((cj8)*(new_r12));
IKReal x109=((-1.00000000000000)+(new_r22));
IKReal x110=((new_r12)*(sj8));
IKReal x111=((cj8)*(new_r02));
IKReal x112=((x111)+(x110));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j9)), 6.28318530717959)));
evalcond[1]=x109;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((((-1.00000000000000)*(x107)))+(x108));
evalcond[5]=((((-1.00000000000000)*(x108)))+(x107));
evalcond[6]=x112;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x109;
evalcond[10]=((-1.00000000000000)*(x112));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj8)*(new_r10)))+(((new_r00)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))))+IKsqr(((((-1.00000000000000)*(cj8)*(new_r10)))+(((new_r00)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((cj8)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj8)))), ((((-1.00000000000000)*(cj8)*(new_r10)))+(((new_r00)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x113=IKsin(j10);
IKReal x114=IKcos(j10);
evalcond[0]=((x114)+(((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(new_r11)))+(((new_r01)*(sj8)))+(x113));
evalcond[2]=((((new_r10)*(sj8)))+(((-1.00000000000000)*(x113)))+(((cj8)*(new_r00))));
evalcond[3]=((((new_r11)*(sj8)))+(((-1.00000000000000)*(x114)))+(((cj8)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j8;
solution.basesol[0].indices[0] = _ij8[0];
solution.basesol[0].indices[1] = _ij8[1];
solution.basesol[0].maxsolutions = _nj8;
solution.basesol[1].foffset = j9;
solution.basesol[1].indices[0] = _ij9[0];
solution.basesol[1].indices[1] = _ij9[1];
solution.basesol[1].maxsolutions = _nj9;
solution.basesol[2].foffset = j10;
solution.basesol[2].indices[0] = _ij10[0];
solution.basesol[2].indices[1] = _ij10[1];
solution.basesol[2].maxsolutions = _nj10;
solution.basesol[3].foffset = j11;
solution.basesol[3].indices[0] = _ij11[0];
solution.basesol[3].indices[1] = _ij11[1];
solution.basesol[3].maxsolutions = _nj11;
solution.basesol[4].foffset = j12;
solution.basesol[4].indices[0] = _ij12[0];
solution.basesol[4].indices[1] = _ij12[1];
solution.basesol[4].maxsolutions = _nj12;
solution.basesol[5].foffset = j13;
solution.basesol[5].indices[0] = _ij13[0];
solution.basesol[5].indices[1] = _ij13[1];
solution.basesol[5].maxsolutions = _nj13;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x115=((new_r02)*(sj8));
IKReal x116=((cj8)*(new_r12));
IKReal x117=((new_r12)*(sj8));
IKReal x118=((cj8)*(new_r02));
IKReal x119=((x117)+(x118));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j9)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((((-1.00000000000000)*(x115)))+(x116));
evalcond[5]=((((-1.00000000000000)*(x116)))+(x115));
evalcond[6]=x119;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=x119;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))))+IKsqr(((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.00000000000000)*(cj8)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj8)))), ((((-1.00000000000000)*(cj8)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj8)))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[4];
IKReal x120=IKsin(j10);
IKReal x121=IKcos(j10);
evalcond[0]=((x121)+(((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8))));
evalcond[1]=((((-1.00000000000000)*(cj8)*(new_r11)))+(((new_r01)*(sj8)))+(x120));
evalcond[2]=((((new_r10)*(sj8)))+(x120)+(((cj8)*(new_r00))));
evalcond[3]=((((new_r11)*(sj8)))+(x121)+(((cj8)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j8;
solution.basesol[0].indices[0] = _ij8[0];
solution.basesol[0].indices[1] = _ij8[1];
solution.basesol[0].maxsolutions = _nj8;
solution.basesol[1].foffset = j9;
solution.basesol[1].indices[0] = _ij9[0];
solution.basesol[1].indices[1] = _ij9[1];
solution.basesol[1].maxsolutions = _nj9;
solution.basesol[2].foffset = j10;
solution.basesol[2].indices[0] = _ij10[0];
solution.basesol[2].indices[1] = _ij10[1];
solution.basesol[2].maxsolutions = _nj10;
solution.basesol[3].foffset = j11;
solution.basesol[3].indices[0] = _ij11[0];
solution.basesol[3].indices[1] = _ij11[1];
solution.basesol[3].maxsolutions = _nj11;
solution.basesol[4].foffset = j12;
solution.basesol[4].indices[0] = _ij12[0];
solution.basesol[4].indices[1] = _ij12[1];
solution.basesol[4].maxsolutions = _nj12;
solution.basesol[5].foffset = j13;
solution.basesol[5].indices[0] = _ij13[0];
solution.basesol[5].indices[1] = _ij13[1];
solution.basesol[5].maxsolutions = _nj13;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.00000000000000)*(gconst3)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst3)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((-1.00000000000000)*(gconst3)*(new_r20)), ((-1.00000000000000)*(gconst3)*(new_r21)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[8];
IKReal x122=IKcos(j10);
IKReal x123=IKsin(j10);
evalcond[0]=((new_r20)+(((cj9)*(x123))));
evalcond[1]=((new_r21)+(((cj9)*(x122))));
evalcond[2]=((x122)+(((cj8)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj8))));
evalcond[3]=((((-1.00000000000000)*(cj8)*(new_r11)))+(((new_r01)*(sj8)))+(x123));
evalcond[4]=((((new_r10)*(sj8)))+(((-1.00000000000000)*(sj9)*(x123)))+(((cj8)*(new_r00))));
evalcond[5]=((((new_r11)*(sj8)))+(((-1.00000000000000)*(sj9)*(x122)))+(((cj8)*(new_r01))));
evalcond[6]=((((cj9)*(new_r20)))+(((-1.00000000000000)*(cj8)*(new_r00)*(sj9)))+(x123)+(((-1.00000000000000)*(new_r10)*(sj8)*(sj9))));
evalcond[7]=((((cj9)*(new_r21)))+(x122)+(((-1.00000000000000)*(cj8)*(new_r01)*(sj9)))+(((-1.00000000000000)*(new_r11)*(sj8)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j8;
solution.basesol[0].indices[0] = _ij8[0];
solution.basesol[0].indices[1] = _ij8[1];
solution.basesol[0].maxsolutions = _nj8;
solution.basesol[1].foffset = j9;
solution.basesol[1].indices[0] = _ij9[0];
solution.basesol[1].indices[1] = _ij9[1];
solution.basesol[1].maxsolutions = _nj9;
solution.basesol[2].foffset = j10;
solution.basesol[2].indices[0] = _ij10[0];
solution.basesol[2].indices[1] = _ij10[1];
solution.basesol[2].maxsolutions = _nj10;
solution.basesol[3].foffset = j11;
solution.basesol[3].indices[0] = _ij11[0];
solution.basesol[3].indices[1] = _ij11[1];
solution.basesol[3].maxsolutions = _nj11;
solution.basesol[4].foffset = j12;
solution.basesol[4].indices[0] = _ij12[0];
solution.basesol[4].indices[1] = _ij12[1];
solution.basesol[4].maxsolutions = _nj12;
solution.basesol[5].foffset = j13;
solution.basesol[5].indices[0] = _ij13[0];
solution.basesol[5].indices[1] = _ij13[1];
solution.basesol[5].maxsolutions = _nj13;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.00000000000000)*(gconst2)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst2)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j10array[0]=IKatan2(((-1.00000000000000)*(gconst2)*(new_r20)), ((-1.00000000000000)*(gconst2)*(new_r21)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IKReal evalcond[2];
evalcond[0]=((new_r20)+(((cj9)*(IKsin(j10)))));
evalcond[1]=((((cj9)*(IKcos(j10))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*(new_r02)*(new_r10)))+(((new_r00)*(new_r12)))));
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r10)))+(((new_r00)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((cj10)*(gconst4)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((cj10)*(gconst4)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((cj10)*(gconst4)*(new_r12)), ((cj10)*(gconst4)*(new_r02)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IKReal evalcond[12];
IKReal x124=IKcos(j8);
IKReal x125=IKsin(j8);
evalcond[0]=((((-1.00000000000000)*(new_r02)*(x125)))+(((new_r12)*(x124))));
evalcond[1]=((((-1.00000000000000)*(new_r00)*(x125)))+(cj10)+(((new_r10)*(x124))));
evalcond[2]=((((new_r01)*(x125)))+(sj10)+(((-1.00000000000000)*(new_r11)*(x124))));
evalcond[3]=((((-1.00000000000000)*(cj9)))+(((new_r02)*(x124)))+(((new_r12)*(x125))));
evalcond[4]=((((new_r00)*(x124)))+(((-1.00000000000000)*(sj10)*(sj9)))+(((new_r10)*(x125))));
evalcond[5]=((((new_r01)*(x124)))+(((-1.00000000000000)*(cj10)*(sj9)))+(((new_r11)*(x125))));
evalcond[6]=((((cj9)*(new_r10)*(x125)))+(((new_r20)*(sj9)))+(((cj9)*(new_r00)*(x124))));
evalcond[7]=((((cj9)*(new_r11)*(x125)))+(((cj9)*(new_r01)*(x124)))+(((new_r21)*(sj9))));
evalcond[8]=((-1.00000000000000)+(((cj9)*(new_r12)*(x125)))+(((cj9)*(new_r02)*(x124)))+(((new_r22)*(sj9))));
evalcond[9]=((((-1.00000000000000)*(new_r12)*(sj9)*(x125)))+(((cj9)*(new_r22)))+(((-1.00000000000000)*(new_r02)*(sj9)*(x124))));
evalcond[10]=((((cj9)*(new_r20)))+(sj10)+(((-1.00000000000000)*(new_r10)*(sj9)*(x125)))+(((-1.00000000000000)*(new_r00)*(sj9)*(x124))));
evalcond[11]=((((-1.00000000000000)*(new_r11)*(sj9)*(x125)))+(((cj9)*(new_r21)))+(cj10)+(((-1.00000000000000)*(new_r01)*(sj9)*(x124))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j8;
solution.basesol[0].indices[0] = _ij8[0];
solution.basesol[0].indices[1] = _ij8[1];
solution.basesol[0].maxsolutions = _nj8;
solution.basesol[1].foffset = j9;
solution.basesol[1].indices[0] = _ij9[0];
solution.basesol[1].indices[1] = _ij9[1];
solution.basesol[1].maxsolutions = _nj9;
solution.basesol[2].foffset = j10;
solution.basesol[2].indices[0] = _ij10[0];
solution.basesol[2].indices[1] = _ij10[1];
solution.basesol[2].maxsolutions = _nj10;
solution.basesol[3].foffset = j11;
solution.basesol[3].indices[0] = _ij11[0];
solution.basesol[3].indices[1] = _ij11[1];
solution.basesol[3].maxsolutions = _nj11;
solution.basesol[4].foffset = j12;
solution.basesol[4].indices[0] = _ij12[0];
solution.basesol[4].indices[1] = _ij12[1];
solution.basesol[4].maxsolutions = _nj12;
solution.basesol[5].foffset = j13;
solution.basesol[5].indices[0] = _ij13[0];
solution.basesol[5].indices[1] = _ij13[1];
solution.basesol[5].maxsolutions = _nj13;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "d075a76aefa22b056ffc5b0ead3faf4e"; }

IKFAST_API const char* getIKFastVersion() { return "55"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
